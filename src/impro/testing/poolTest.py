from multiprocessing import Pool
import time
import numpy as np
import os

def f(x):
    #print "x ", x
    #print "id: ", os.getpid(), "ppid: ", os.getppid()
    return x*x*x*x*x

def fArray(x, y):
    #print x, y
    return x*y

def fArray2(x):
    return sum(x)

def benchmarkPool():
    if __name__ == '__main__':
        times = []
        for i in range(200):
            pool = Pool(processes=1)              # start 4 worker processes
            start = time.time()
            result = pool.apply_async(f, [10])    # evaluate "f(10)" asynchronously
            result.get(timeout=1)           # prints "100" unless your computer is *very* slow
            times.append(time.time() - start)
            pool.terminate()
            #print pool.map(f, range(10))          # prints "[0, 1, 4,..., 81]"
        print np.mean(times)
    
#if __name__ == '__main__':
    #pool = Pool(processes=2)              # start 4 worker processes
    #start = time.time()
    #result = pool.apply_async(f, [10])    # evaluate "f(10)" asynchronously
    #result.get(timeout=1)           # prints "100" unless your computer is *very* slow
    #print pool.map(f, [1,2,4,8])          # prints "[0, 1, 4,..., 81]"
    #print "round 2"
    #print pool.map(f, [1,2,4,6]) 
    

#print [(0,0) for i in range(10)]

def main():
    pool = Pool(processes=3)              # start 4 worker processes
    #arrays = [list(np.random.binomial(5 - 1 , 0.4,10)) for i in range(100)]
    #arrays = [[2, 2, 1, 1, 2, 0, 2, 3, 1, 3], [1, 0, 1, 2, 3, 3, 2, 1, 1, 3], [1, 2, 0, 0, 1, 2, 1, 2, 1, 2], [1, 3, 0, 2, 2, 3, 0, 2, 1, 2], [2, 2, 2, 2, 1, 2, 2, 2, 3, 2], [1, 3, 1, 2, 1, 0, 0, 1, 1, 1], [1, 2, 2, 1, 1, 1, 1, 1, 1, 0], [1, 1, 2, 4, 3, 3, 0, 1, 1, 1], [2, 1, 1, 1, 0, 0, 3, 1, 3, 2], [1, 2, 3, 2, 1, 2, 1, 2, 1, 2], [1, 3, 2, 1, 1, 2, 3, 2, 1, 2], [0, 2, 1, 1, 0, 2, 0, 2, 4, 4], [2, 2, 1, 1, 2, 0, 2, 1, 3, 2], [0, 2, 0, 1, 4, 3, 0, 2, 3, 2], [1, 1, 1, 4, 2, 1, 1, 2, 0, 1], [0, 1, 1, 1, 0, 2, 1, 1, 1, 2], [0, 1, 3, 3, 0, 2, 2, 2, 2, 2], [0, 3, 2, 3, 2, 1, 1, 3, 1, 0], [0, 2, 2, 0, 2, 2, 1, 1, 3, 1], [0, 2, 2, 3, 2, 1, 2, 0, 0, 0], [1, 3, 1, 2, 2, 0, 1, 2, 3, 2], [3, 1, 0, 1, 2, 0, 2, 1, 1, 1], [2, 1, 3, 3, 0, 2, 2, 2, 0, 1], [2, 3, 1, 3, 1, 1, 0, 0, 1, 2], [1, 3, 0, 2, 1, 2, 1, 2, 2, 4], [1, 3, 1, 0, 2, 0, 2, 1, 0, 0], [1, 1, 2, 2, 3, 3, 3, 2, 1, 2], [1, 1, 2, 2, 1, 4, 2, 1, 1, 1], [3, 3, 2, 0, 1, 1, 3, 1, 0, 2], [3, 0, 3, 2, 2, 2, 1, 2, 2, 2]]
    arrays = [[3, 2, 2, 1, 3, 3, 2, 2, 2, 2], [2, 2, 1, 2, 3, 4, 2, 1, 0, 2], [2, 2, 0, 1, 3, 1, 3, 3, 1, 1], [1, 1, 2, 0, 1, 4, 2, 1, 2, 2], [0, 3, 1, 2, 0, 2, 1, 0, 0, 3], [3, 3, 0, 3, 2, 3, 2, 2, 2, 0], [1, 0, 2, 1, 1, 2, 1, 3, 2, 1], [2, 2, 0, 2, 3, 1, 3, 1, 1, 2], [3, 2, 2, 0, 2, 2, 0, 2, 0, 0], [1, 2, 2, 1, 1, 2, 1, 2, 2, 0], [1, 3, 1, 0, 2, 3, 0, 1, 2, 0], [0, 2, 3, 2, 2, 2, 1, 1, 1, 3], [1, 1, 2, 0, 1, 1, 2, 2, 0, 2], [3, 2, 2, 3, 0, 3, 0, 0, 2, 1], [2, 3, 1, 3, 1, 1, 3, 3, 2, 3], [3, 4, 3, 3, 1, 2, 2, 2, 1, 1], [2, 1, 1, 1, 0, 1, 1, 1, 0, 2], [2, 2, 0, 1, 1, 2, 1, 0, 1, 3], [2, 1, 2, 2, 2, 2, 1, 1, 2, 1], [1, 2, 2, 2, 3, 1, 1, 1, 2, 2], [3, 1, 1, 3, 3, 0, 1, 4, 1, 1], [3, 1, 2, 1, 1, 1, 1, 2, 3, 0], [1, 1, 0, 1, 3, 1, 0, 2, 3, 1], [3, 1, 2, 3, 0, 3, 3, 2, 1, 1], [2, 3, 1, 0, 2, 1, 1, 2, 2, 2], [4, 3, 1, 3, 0, 1, 0, 3, 2, 1], [3, 0, 0, 1, 4, 1, 0, 2, 1, 3], [1, 0, 1, 2, 1, 3, 1, 1, 2, 2], [2, 2, 1, 3, 3, 1, 1, 1, 2, 3], [3, 1, 2, 2, 2, 4, 2, 2, 1, 1], [1, 1, 2, 2, 3, 0, 3, 4, 2, 1], [3, 2, 1, 3, 0, 1, 2, 2, 2, 3], [2, 2, 2, 2, 0, 2, 2, 0, 3, 3], [2, 0, 3, 3, 2, 2, 0, 0, 3, 2], [0, 2, 1, 1, 1, 4, 0, 2, 1, 2], [1, 3, 1, 0, 2, 1, 2, 2, 2, 3], [1, 1, 1, 2, 1, 2, 3, 2, 1, 3], [0, 1, 1, 3, 3, 3, 0, 1, 2, 1], [0, 1, 0, 3, 0, 2, 1, 0, 0, 2], [1, 2, 2, 2, 3, 1, 2, 0, 0, 1], [2, 1, 1, 1, 2, 1, 2, 1, 2, 3], [1, 1, 1, 1, 3, 1, 1, 1, 2, 1], [2, 0, 2, 2, 3, 2, 1, 2, 2, 0], [0, 1, 1, 2, 2, 3, 1, 1, 2, 2], [3, 1, 2, 3, 3, 2, 2, 0, 2, 3], [0, 2, 1, 2, 2, 2, 2, 1, 2, 2], [3, 2, 1, 2, 2, 3, 1, 1, 2, 3], [3, 2, 1, 1, 1, 1, 2, 0, 3, 2], [3, 3, 3, 1, 1, 1, 1, 3, 3, 2], [1, 3, 2, 3, 2, 2, 3, 4, 1, 0], [1, 1, 2, 0, 3, 1, 3, 0, 4, 0], [3, 1, 0, 1, 2, 2, 0, 1, 1, 2], [2, 0, 3, 2, 2, 1, 1, 3, 1, 0], [2, 1, 2, 1, 3, 2, 2, 1, 3, 0], [1, 2, 1, 1, 2, 1, 1, 3, 2, 2], [1, 3, 0, 2, 2, 0, 2, 2, 1, 1], [1, 2, 1, 0, 2, 2, 2, 3, 1, 3], [2, 2, 3, 0, 1, 2, 3, 0, 3, 2], [1, 3, 0, 4, 2, 3, 2, 2, 3, 4], [1, 0, 3, 3, 1, 2, 1, 3, 0, 3], [1, 2, 4, 1, 1, 0, 2, 3, 1, 1], [2, 0, 2, 2, 2, 1, 3, 1, 1, 2], [2, 0, 1, 2, 2, 2, 1, 3, 1, 1], [3, 1, 3, 2, 1, 2, 2, 3, 0, 3], [1, 2, 1, 1, 2, 3, 3, 2, 2, 2], [0, 1, 2, 1, 2, 1, 1, 3, 1, 2], [4, 1, 1, 3, 3, 2, 2, 1, 2, 1], [3, 4, 2, 1, 4, 4, 1, 2, 2, 2], [2, 1, 2, 2, 3, 3, 0, 3, 3, 4], [2, 1, 0, 2, 1, 2, 0, 3, 1, 1], [3, 3, 1, 2, 1, 2, 0, 1, 3, 3], [2, 2, 2, 1, 1, 2, 2, 3, 3, 1], [4, 2, 1, 2, 1, 3, 2, 1, 0, 1], [3, 1, 3, 1, 0, 1, 3, 2, 2, 1], [1, 1, 0, 1, 2, 0, 3, 2, 2, 1], [0, 3, 1, 0, 0, 0, 2, 2, 1, 2], [2, 1, 1, 1, 2, 2, 0, 1, 0, 2], [1, 2, 2, 0, 4, 1, 3, 0, 1, 1], [1, 1, 3, 1, 3, 2, 4, 3, 3, 2], [2, 2, 3, 1, 2, 3, 2, 3, 2, 2], [1, 1, 1, 2, 3, 0, 2, 1, 1, 1], [3, 0, 3, 0, 3, 2, 3, 3, 2, 4], [0, 1, 4, 0, 3, 2, 1, 1, 2, 2], [2, 1, 0, 2, 2, 2, 3, 2, 2, 3], [1, 1, 1, 0, 1, 2, 1, 0, 2, 1], [0, 0, 4, 3, 0, 1, 3, 0, 2, 2], [1, 1, 3, 3, 2, 2, 2, 3, 3, 2], [3, 1, 2, 2, 2, 2, 2, 1, 1, 2], [1, 3, 1, 2, 3, 3, 2, 3, 1, 2], [2, 1, 2, 2, 3, 0, 2, 3, 0, 1], [1, 2, 2, 2, 1, 2, 1, 0, 1, 2], [0, 1, 2, 2, 0, 4, 2, 2, 1, 2], [0, 0, 1, 1, 0, 2, 3, 3, 0, 2], [1, 2, 1, 1, 1, 1, 2, 3, 0, 0], [1, 1, 1, 2, 1, 2, 3, 1, 1, 2], [2, 4, 0, 3, 3, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 2, 2, 1, 0], [2, 3, 3, 0, 2, 0, 3, 3, 1, 0], [2, 2, 3, 1, 3, 1, 1, 1, 2, 2], [3, 1, 2, 2, 1, 2, 1, 1, 3, 1]]
    print arrays
    result = pool.map(fArray2, arrays)
    pool.terminate()
    print result
    print sum(result)
        
main()